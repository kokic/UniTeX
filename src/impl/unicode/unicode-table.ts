
import { type char } from '../../parsec/string-iterator.ts';

import Proper from './proper.ts';
// import "./parsec/declare-global.ts";

type SMap = { [key: string]: string };

type Typeface = {
  mathbf: SMap;
  mathit: SMap;
  mathsf: SMap;
  mathscr: SMap;
  mathcal: SMap;
  mathfrak: SMap;
  mathbb: SMap;
  texttt: SMap;
};

const Unicode = {
  typeface: {} as Typeface,

  isLetterOrGreek: (s: string) => s.boundedIn('a', 'z') || s.boundedIn('A', 'Z') || s.boundedIn('Œ±', 'œ∂') || s.boundedIn('Œë', 'Œ©'),

  /**
   * @returns string from code point `a` to `b`
   */
  series: (a: char, b: char) => {
    let [start, end] = [a.codePointAt(0)!, b.codePointAt(0)!];
    let length = end - start + 1;
    let codes = Array.from({ length: length }, (_, x) => x + start);
    return String.fromCodePoint(...codes);
  },

  alphabets: (...table: string[]) => {
    let map: SMap = Object.create(null);
    Unicode["letterArray"].forEach((x: string, i: number) => map[x] = table[i]);
    return map;
  },

  block: (a: char, b: char, names: string[]) => {
    let map = new Object();
    let data = Unicode.series(a, b);
    names.forEach((name, i) => name && (map[name] = data[i]));
    return map;
  },

  /**
   * Renders the given string if it exists, using the specified unicode typeface.
   *
   * @param {string} s - The string to render.
   * @param {string} name - The name of the Unicode typeface to use.
   * @return {string} - The rendered string.
   */
  render_if_exists: (s: string, name: string): string =>
    Array.from(s).map(x => Unicode.typeface[name][x] || x).join(''),

  /**
   * Checks if all characters in the given string are present in the charset object.
   *
   * @param {object} charset - The charset object containing the characters to check against.
   * @param {string} str - The string to be checked.
   * @param {function} otherwise - The callback function to be called if the characters are not present.
   * @return {string} Returns if all characters are present or the result of the otherwise callback.
   */
  render_if_forall: (
    charset: SMap,
    str: string,
    otherwise: (s: string) => string = x => x
  ): string => {
    const array = Array.from(str);
    let through = true;

    for (const element of array)
      through &&= !!charset[element];

    return through
      ? array.map(x => charset[x]).join('')
      : otherwise(str)
  },

  typefaceNames: [] as string[],

  suprender: (s: string) => Unicode.render_if_forall(Unicode["supscripts"], s, x => '^' + Proper.brace(x)),
  subrender: (s: string) => Unicode.render_if_forall(Unicode["subscripts"], s, x => '_' + Proper.brace(x)),

  supscripts: {} as SMap,
  subscripts: {} as SMap,

  greeks: {} as SMap,
};

Unicode["letterUppers"] = Unicode.series('A', 'Z');
Unicode["letterLowers"] = Unicode.series('a', 'z');
Unicode["letters"] = Unicode["letterUppers"] + Unicode["letterLowers"];
Unicode["letterArray"] = Array.from(Unicode["letters"]);

Unicode["greekUppers"] = Unicode.series('Œë', 'Œ°') + Unicode.series('Œ£', 'Œ©')
Unicode["greekLowers"] = Unicode.series('Œ±', 'œÅ') + Unicode.series('œÉ', 'œâ')
Unicode["greeks"] = Unicode["greekUppers"] + Unicode["greekLowers"];


// typeface (Mathematical Alphanumeric Symbols)
const series = Unicode.series;
const alphabets = Unicode.alphabets;

const typeface = function (name: string, alphabet: SMap) {
  Unicode.typeface[name] = alphabet;
}

typeface('mathbb', alphabets(...'ùî∏ùîπ‚ÑÇ', ...series('ùîª', 'ùîæ'),
  '‚Ñç', ...series('ùïÄ', 'ùïÑ'), ...'‚ÑïùïÜ‚Ñô‚Ñö‚Ñù', ...series('ùïä', 'ùïê'),
  '‚Ñ§', ...series('ùïí', 'ùï´'))
)
typeface('mathfrak', alphabets(...series('ùï¨', 'ùñü')))
typeface('mathscr', alphabets(...'ùíú‚Ñ¨ùíûùíü‚Ñ∞‚Ñ±ùí¢‚Ñã‚Ñêùí•ùí¶‚Ñí‚Ñ≥', ...series('ùí©', 'ùí¨'),
  '‚Ñõ', ...series('ùíÆ', 'ùíπ'), '‚ÑØ', 'ùíª', 'g', ...series('ùíΩ', 'ùìÉ'),
  '‚Ñ¥', ...series('ùìÖ', 'ùìè'))
)
typeface('mathcal', Unicode.typeface["mathscr"]); // remark
typeface('mathbf', alphabets(...series('ùêÄ', 'ùê≥')));
typeface('mathit', alphabets(...series('ùê¥', 'ùëî'), 'h', ...series('ùëñ', 'ùëß')));
typeface('mathsf', alphabets(...series('ùñ†', 'ùóì')));

typeface('textbf', Unicode.typeface.mathbf);
typeface('textit', Unicode.typeface.mathit);
typeface('textsf', Unicode.typeface.mathsf);
typeface('texttt', alphabets(...series('ùô∞', 'ùö£')));

typeface('textscr', Unicode.typeface.mathscr); // original
typeface('textcal', Unicode.typeface.mathcal); // original

typeface('sf', Unicode.typeface.mathsf);
typeface('bf', Unicode.typeface.mathbf);
typeface('bold', Unicode.typeface.mathbf);

typeface('boldsymbol', Unicode.typeface.mathbf);
typeface('bm', Unicode.typeface.mathbf);

typeface('tt', Unicode.typeface.texttt);
typeface('it', Unicode.typeface.mathit);

typeface('frak', Unicode.typeface.mathfrak);
typeface('cal', Unicode.typeface.mathcal);

typeface('Bbb', Unicode.typeface.mathbb);
// typeface('text', alphabets(...series('A', 'Z'), ...series('a', 'z')));

Unicode.typefaceNames = Object.keys(Unicode.typeface);

// supscript & subscript

Unicode.supscripts[0] = '‚Å∞';
Unicode.supscripts[1] = '¬π';
Unicode.supscripts[2] = '¬≤';
Unicode.supscripts[3] = '¬≥'; // u00b3
Unicode.supscripts[4] = '‚Å¥';
Unicode.supscripts[5] = '‚Åµ';
Unicode.supscripts[6] = '‚Å∂';
Unicode.supscripts[7] = '‚Å∑';
Unicode.supscripts[8] = '‚Å∏';
Unicode.supscripts[9] = '‚Åπ';

Unicode.supscripts.a = '·µÉ';
Unicode.supscripts.b = '·µá';
Unicode.supscripts.c = '·∂ú';
Unicode.supscripts.d = '·µà';
Unicode.supscripts.e = '·µâ';
Unicode.supscripts.f = '·∂†';
Unicode.supscripts.g = '·µç';
Unicode.supscripts.h = ' ∞';
// Unicode.supscripts.i = '^i'
Unicode.supscripts.j = ' ≤';
Unicode.supscripts.k = '·µè';
Unicode.supscripts.l = 'À°';
Unicode.supscripts.m = '·µê';
Unicode.supscripts.n = '‚Åø'; // u207f
Unicode.supscripts.o = '·µí';
Unicode.supscripts.p = '·µñ';
Unicode.supscripts.r = ' ≥';
Unicode.supscripts.s = 'À¢';
Unicode.supscripts.t = '·µó';
Unicode.supscripts.u = '·µò';
Unicode.supscripts.v = '·µõ';
Unicode.supscripts.w = ' ∑';
Unicode.supscripts.x = 'À£'; // u02e3
Unicode.supscripts.y = ' ∏';
Unicode.supscripts.z = '·∂ª';

Unicode.supscripts['+'] = '‚Å∫';
Unicode.supscripts['-'] = '‚Åª';
Unicode.supscripts['='] = '‚Åº';
Unicode.supscripts['('] = '‚ÅΩ';
Unicode.supscripts[')'] = '‚Åæ';

// Unicode: Phonetic Extensions
Unicode.supscripts.A = '·¥¨';
// Unicode.supscripts. = '·¥≠'
Unicode.supscripts.B = '·¥Æ';
// Unicode.supscripts. = '·¥Ø';
Unicode.supscripts.D = '·¥∞';
Unicode.supscripts.E = '·¥±';
// Unicode.supscripts. = '·¥≤';
Unicode.supscripts.G = '·¥≥';
Unicode.supscripts.H = '·¥¥';
Unicode.supscripts.I = '·¥µ';
Unicode.supscripts.J = '·¥∂';
Unicode.supscripts.K = '·¥∑';
Unicode.supscripts.L = '·¥∏';
Unicode.supscripts.M = '·¥π';
Unicode.supscripts.N = '·¥∫';
// Unicode.supscripts. = '·¥ª';
Unicode.supscripts['Œ±'] = '·µÖ';
Unicode.supscripts['‚Ä≤'] = '‚Ä≤';


// subscripts

['‚ÇÄ', '‚ÇÅ', '‚ÇÇ', '‚ÇÉ', '‚ÇÑ', '‚ÇÖ', '‚ÇÜ', '‚Çá', '‚Çà', '‚Çâ']
  .forEach((x, i) => Unicode.subscripts[i] = x);

Unicode.subscripts.a = '‚Çê';
Unicode.subscripts.e = '‚Çë';
Unicode.subscripts.h = '‚Çï';
Unicode.subscripts.i = '·µ¢'; // u1d62
Unicode.subscripts.j = '‚±º';
Unicode.subscripts.k = '‚Çñ';
Unicode.subscripts.l = '‚Çó';
Unicode.subscripts.m = '‚Çò';
Unicode.subscripts.n = '‚Çô';
Unicode.subscripts.o = '‚Çí';
Unicode.subscripts.p = '‚Çö'; // u209a
Unicode.subscripts.r = '·µ£';
Unicode.subscripts.s = '‚Çõ';
Unicode.subscripts.t = '‚Çú';
Unicode.subscripts.u = '·µ§';
Unicode.subscripts.v = '·µ•';
Unicode.subscripts.x = '‚Çì';

Unicode.subscripts['+'] = '‚Çä';
Unicode.subscripts['-'] = '‚Çã';
Unicode.subscripts['='] = '‚Çå';
Unicode.subscripts['('] = '‚Çç';
Unicode.subscripts[')'] = '‚Çé';

export default Unicode;

